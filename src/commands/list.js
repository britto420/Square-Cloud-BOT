const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const squareCloud = require('../utils/squarecloud.js');
const { colors } = require('../config/config.js');
const logger = require('../utils/logger.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('list')
        .setDescription('Listar todas as aplica√ß√µes na Square Cloud'),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });

        try {
            // Listar apenas aplica√ß√µes do usu√°rio
            const apps = await squareCloud.listApps(interaction.user.id);

            if (!apps || apps.length === 0) {
                const noAppsEmbed = new EmbedBuilder()
                    .setTitle('üìã Nenhuma Aplica√ß√£o Encontrada')
                    .setDescription('**Voc√™ ainda n√£o possui aplica√ß√µes na Square Cloud.**\n\nüöÄ **Para come√ßar:**\n‚Ä¢ Use o comando `/deploy` para fazer upload da sua aplica√ß√£o\n‚Ä¢ Escolha um plano (B√°sico, Padr√£o ou Premium)\n‚Ä¢ Efetue o pagamento via PIX\n‚Ä¢ Sua aplica√ß√£o ser√° implantada automaticamente!\n\nüí° **Dica:** Ap√≥s fazer o deploy, use `/list` novamente para ver suas aplica√ß√µes.')
                    .setColor(colors.info)
                    .setTimestamp()
                    .setFooter({ text: 'Square Cloud Bot' });

                return await interaction.editReply({
                    embeds: [noAppsEmbed]
                });
            }

            // Criar embed com lista de aplica√ß√µes
            const listEmbed = new EmbedBuilder()
                .setTitle('üìã Suas Aplica√ß√µes na Square Cloud')
                .setDescription(`Total de aplica√ß√µes: **${apps.length}**`)
                .setColor(colors.primary)
                .setTimestamp()
                .setFooter({ text: 'Square Cloud Bot' });

            // Adicionar campos para cada aplica√ß√£o
            apps.forEach((app, index) => {
                const statusEmoji = this.getStatusEmoji(app.status);
                const fieldName = `${index + 1}. ${app.name || `App ${app.id}`}`;
                const memoryInfo = app.memory?.total ? `${app.memory.used || 0}MB / ${app.memory.total}MB` : `${app.memory || 'N/A'}MB`;
                const fieldValue = `**ID:** \`${app.id}\`\n**Status:** ${statusEmoji} ${app.status || 'Desconhecido'}\n**Mem√≥ria:** ${memoryInfo}\n**URL:** ${app.url || 'N/A'}`;
                
                listEmbed.addFields({ 
                    name: fieldName, 
                    value: fieldValue, 
                    inline: true 
                });
            });

            // Bot√µes para a√ß√µes r√°pidas
            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('list_refresh')
                        .setLabel('Atualizar Lista')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üîÑ'),
                    new ButtonBuilder()
                        .setCustomId('list_details')
                        .setLabel('Ver Detalhes')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìä')
                );

            await interaction.editReply({
                embeds: [listEmbed],
                components: [buttons]
            });

            logger.info(`Lista de aplica√ß√µes consultada por ${interaction.user.tag}`);

        } catch (error) {
            logger.error('Erro ao listar aplica√ß√µes:', error);

            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Erro ao Listar Aplica√ß√µes')
                .setDescription(`N√£o foi poss√≠vel obter a lista de aplica√ß√µes.\n\n**Erro:** ${error.message}\n\n**Dica:** Verifique se sua API key da Square Cloud est√° configurada corretamente.`)
                .setColor(colors.error)
                .setTimestamp();

            await interaction.editReply({
                embeds: [errorEmbed]
            });
        }
    },

    async handleComponent(interaction, action) {
        switch (action) {
            case 'refresh':
                await this.refreshList(interaction);
                break;
            case 'details':
                await this.showDetailedList(interaction);
                break;
            case 'back':
                await this.backToList(interaction);
                break;
        }
    },

    async refreshList(interaction) {
        try {
            await interaction.deferUpdate();
            
            const apps = await squareCloud.listApps(interaction.user.id);

            if (!apps || apps.length === 0) {
                const noAppsEmbed = new EmbedBuilder()
                    .setTitle('üìã Nenhuma Aplica√ß√£o Encontrada')
                    .setDescription('**Voc√™ ainda n√£o possui aplica√ß√µes na Square Cloud.**\n\nüöÄ **Para come√ßar:**\n‚Ä¢ Use o comando `/deploy` para fazer upload da sua aplica√ß√£o\n‚Ä¢ Escolha um plano (B√°sico, Padr√£o ou Premium)\n‚Ä¢ Efetue o pagamento via PIX\n‚Ä¢ Sua aplica√ß√£o ser√° implantada automaticamente!\n\nüí° **Dica:** Ap√≥s fazer o deploy, use `/list` novamente para ver suas aplica√ß√µes.')
                    .setColor(colors.info)
                    .setTimestamp()
                    .setFooter({ text: 'Square Cloud Bot' });

                return await interaction.editReply({
                    embeds: [noAppsEmbed],
                    components: []
                });
            }

            const listEmbed = new EmbedBuilder()
                .setTitle('üìã Suas Aplica√ß√µes na Square Cloud')
                .setDescription(`Total de aplica√ß√µes: **${apps.length}** (Atualizado: <t:${Math.floor(Date.now() / 1000)}:R>)`)
                .setColor(colors.primary)
                .setTimestamp()
                .setFooter({ text: 'Square Cloud Bot' });

            apps.forEach((app, index) => {
                const statusEmoji = this.getStatusEmoji(app.status);
                const fieldName = `${index + 1}. ${app.name || `App ${app.id}`}`;
                const memoryInfo = app.memory?.total ? `${app.memory.used || 0}MB / ${app.memory.total}MB` : `${app.memory || 'N/A'}MB`;
                const fieldValue = `**ID:** \`${app.id}\`\n**Status:** ${statusEmoji} ${app.status || 'Desconhecido'}\n**Mem√≥ria:** ${memoryInfo}\n**URL:** ${app.url || 'N/A'}`;
                
                listEmbed.addFields({ 
                    name: fieldName, 
                    value: fieldValue, 
                    inline: true 
                });
            });

            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('list_refresh')
                        .setLabel('Atualizar Lista')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üîÑ'),
                    new ButtonBuilder()
                        .setCustomId('list_details')
                        .setLabel('Ver Detalhes')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìä')
                );

            await interaction.editReply({
                embeds: [listEmbed],
                components: [buttons]
            });

        } catch (error) {
            logger.error('Erro ao atualizar lista:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Erro ao Atualizar Lista')
                .setDescription(`N√£o foi poss√≠vel atualizar a lista de aplica√ß√µes.\n\n**Erro:** ${error.message}`)
                .setColor(colors.error)
                .setTimestamp();

            await interaction.editReply({
                embeds: [errorEmbed],
                components: []
            });
        }
    },

    async showDetailedList(interaction) {
        try {
            await interaction.deferUpdate();

            const apps = await squareCloud.listApps(interaction.user.id);

            if (!apps || apps.length === 0) {
                const noAppsEmbed = new EmbedBuilder()
                    .setTitle('üìã Nenhuma Aplica√ß√£o Encontrada')
                    .setDescription('**Voc√™ ainda n√£o possui aplica√ß√µes na Square Cloud.**\n\nüöÄ **Para come√ßar:**\n‚Ä¢ Use o comando `/deploy` para fazer upload da sua aplica√ß√£o\n‚Ä¢ Escolha um plano (B√°sico, Padr√£o ou Premium)\n‚Ä¢ Efetue o pagamento via PIX\n‚Ä¢ Sua aplica√ß√£o ser√° implantada automaticamente!')
                    .setColor(colors.info)
                    .setTimestamp()
                    .setFooter({ text: 'Square Cloud Bot' });

                return await interaction.editReply({
                    embeds: [noAppsEmbed],
                    components: []
                });
            }

            // Criar embed detalhado
            const detailEmbed = new EmbedBuilder()
                .setTitle('üìä Detalhes das Aplica√ß√µes')
                .setDescription('Informa√ß√µes detalhadas de todas as suas aplica√ß√µes:')
                .setColor(colors.info)
                .setTimestamp();

            // Adicionar informa√ß√µes detalhadas para cada aplica√ß√£o
            apps.forEach((app, index) => {
                const statusEmoji = this.getStatusEmoji(app.status);
                const uptime = app.uptime || 'N/A';
                const memoryUsed = app.memory?.used || 0;
                const memoryTotal = app.memory?.total || 0;
                const cpuUsage = app.cpu?.usage || 0;
                
                detailEmbed.addFields({
                    name: `${index + 1}. ${app.name || `App ${app.id}`}`,
                    value: `**ID:** \`${app.id}\`\n**Status:** ${statusEmoji} ${app.status || 'Desconhecido'}\n**Mem√≥ria:** ${memoryUsed}MB / ${memoryTotal}MB\n**CPU:** ${cpuUsage}%\n**Uptime:** ${uptime}\n**URL:** ${app.url || 'N/A'}`,
                    inline: false
                });
            });

            // Bot√£o para voltar
            const backButton = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('list_back')
                        .setLabel('Voltar')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('‚¨ÖÔ∏è')
                );

            await interaction.editReply({
                embeds: [detailEmbed],
                components: [backButton]
            });

        } catch (error) {
            logger.error('Erro ao mostrar detalhes:', error);
            
            await interaction.editReply({
                content: `‚ùå **Erro:** N√£o foi poss√≠vel obter os detalhes das aplica√ß√µes.\n\n**Detalhes:** ${error.message}`,
                embeds: [],
                components: []
            });
        }
    },

    async backToList(interaction) {
        try {
            await interaction.deferUpdate();
            
            const apps = await squareCloud.listApps(interaction.user.id);

            if (!apps || apps.length === 0) {
                const noAppsEmbed = new EmbedBuilder()
                    .setTitle('üìã Nenhuma Aplica√ß√£o Encontrada')
                    .setDescription('**Voc√™ ainda n√£o possui aplica√ß√µes na Square Cloud.**\n\nüöÄ **Para come√ßar:**\n‚Ä¢ Use o comando `/deploy` para fazer upload da sua aplica√ß√£o\n‚Ä¢ Escolha um plano (B√°sico, Padr√£o ou Premium)\n‚Ä¢ Efetue o pagamento via PIX\n‚Ä¢ Sua aplica√ß√£o ser√° implantada automaticamente!')
                    .setColor(colors.info)
                    .setTimestamp()
                    .setFooter({ text: 'Square Cloud Bot' });

                return await interaction.editReply({
                    embeds: [noAppsEmbed],
                    components: []
                });
            }

            const listEmbed = new EmbedBuilder()
                .setTitle('üìã Suas Aplica√ß√µes na Square Cloud')
                .setDescription(`Total de aplica√ß√µes: **${apps.length}**`)
                .setColor(colors.primary)
                .setTimestamp()
                .setFooter({ text: 'Square Cloud Bot' });

            apps.forEach((app, index) => {
                const statusEmoji = this.getStatusEmoji(app.status);
                const fieldName = `${index + 1}. ${app.name || `App ${app.id}`}`;
                const memoryInfo = app.memory?.total ? `${app.memory.used || 0}MB / ${app.memory.total}MB` : `${app.memory || 'N/A'}MB`;
                const fieldValue = `**ID:** \`${app.id}\`\n**Status:** ${statusEmoji} ${app.status || 'Desconhecido'}\n**Mem√≥ria:** ${memoryInfo}\n**URL:** ${app.url || 'N/A'}`;
                
                listEmbed.addFields({ 
                    name: fieldName, 
                    value: fieldValue, 
                    inline: true 
                });
            });

            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('list_refresh')
                        .setLabel('Atualizar Lista')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üîÑ'),
                    new ButtonBuilder()
                        .setCustomId('list_details')
                        .setLabel('Ver Detalhes')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìä')
                );

            await interaction.editReply({
                embeds: [listEmbed],
                components: [buttons]
            });

        } catch (error) {
            logger.error('Erro ao voltar para lista:', error);
            
            await interaction.editReply({
                content: `‚ùå **Erro:** N√£o foi poss√≠vel voltar para a lista.\n\n**Detalhes:** ${error.message}`,
                embeds: [],
                components: []
            });
        }
    },

    getStatusEmoji(status) {
        switch (status?.toLowerCase()) {
            case 'online':
            case 'running':
                return 'üü¢';
            case 'offline':
            case 'stopped':
                return 'üî¥';
            case 'starting':
            case 'restarting':
                return 'üü°';
            default:
                return '‚ö™';
        }
    }
};