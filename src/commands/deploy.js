const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const squareCloud = require('../utils/squarecloud.js');
const mercadoPago = require('../utils/mercadopago.js');
const paymentPoller = require('../utils/paymentPoller.js');
const adminLogger = require('../utils/adminLogger.js');
const { colors } = require('../config/config.js');
const logger = require('../utils/logger.js');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// Carregar configura√ß√µes din√¢micas
function loadConfig() {
    try {
        const configPath = path.join(__dirname, '../data/admin-config.json');
        if (fs.existsSync(configPath)) {
            return JSON.parse(fs.readFileSync(configPath, 'utf8'));
        }
    } catch (error) {
        logger.error('Erro ao carregar configura√ß√£o:', error);
    }
    
    // Configura√ß√£o padr√£o
    return {
        paymentSettings: {
            basicPrice: 15.00,
            standardPrice: 25.00,
            premiumPrice: 50.00,
            pixEnabled: true,
            autoDeployEnabled: true
        }
    };
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('deploy')
        .setDescription('Fazer deploy de uma aplica√ß√£o na Square Cloud')
        .addAttachmentOption(option =>
            option.setName('arquivo')
                .setDescription('Arquivo ZIP da aplica√ß√£o')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName('plano')
                .setDescription('Plano de hospedagem')
                .setRequired(true)
                .addChoices(
                    { name: 'B√°sico', value: 'basic' },
                    { name: 'Padr√£o', value: 'standard' },
                    { name: 'Premium', value: 'premium' }
                )
        ),

    async execute(interaction) {
        const file = interaction.options.getAttachment('arquivo');
        const plan = interaction.options.getString('plano');
        
        // Carregar configura√ß√µes atuais
        const config = loadConfig();
        const planPrice = config.paymentSettings[`${plan}Price`];

        // Validar arquivo
        if (!file) {
            return await interaction.reply({
                content: '‚ùå **Erro:** Arquivo n√£o fornecido.',
                ephemeral: true
            });
        }

        // Validar extens√£o do arquivo
        const allowedExtensions = ['.zip'];
        const fileExtension = file.name.toLowerCase();
        const isValidExtension = allowedExtensions.some(ext => fileExtension.endsWith(ext));

        if (!isValidExtension) {
            return await interaction.reply({
                content: `‚ùå **Erro:** Formato de arquivo n√£o suportado.\n\n**Formatos aceitos:** ${allowedExtensions.join(', ')}`,
                ephemeral: true
            });
        }

        // Validar tamanho do arquivo (100MB)
        if (file.size > 100 * 1024 * 1024) {
            return await interaction.reply({
                content: '‚ùå **Erro:** Arquivo muito grande. Tamanho m√°ximo: 100MB.',
                ephemeral: true
            });
        }

        // Criar embed de configura√ß√£o com valores atualizados
        const configEmbed = new EmbedBuilder()
            .setTitle('üöÄ Deploy na Square Cloud')
            .setDescription(`**Arquivo:** ${file.name}\n**Plano:** ${plan.charAt(0).toUpperCase() + plan.slice(1)} - R$ ${planPrice.toFixed(2)}`)
            .setColor(colors.info)
            .setTimestamp()
            .setFooter({ text: 'Square Cloud Bot' });

        // Bot√µes de a√ß√£o
        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('deploy_configure')
                    .setLabel('Configurar Deploy')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('‚öôÔ∏è'),
                new ButtonBuilder()
                    .setCustomId('deploy_payment')
                    .setLabel('Pagar e Fazer Deploy')
                    .setStyle(ButtonStyle.Success)
                    .setEmoji('üí≥')
            );

        await interaction.reply({
            embeds: [configEmbed],
            components: [buttons],
            ephemeral: true
        });

        // Armazenar dados do deploy em cache global
        if (!global.deployCache) {
            global.deployCache = new Map();
        }
        
        global.deployCache.set(interaction.user.id, {
            file: file,
            plan: plan,
            price: planPrice,
            config: {
                displayName: file.name.split('.')[0].replace(/[^a-zA-Z0-9\s]/g, '').trim() || 'MyApp',
                description: `Deploy via Discord - Plano ${plan}`,
                memory: plan === 'basic' ? 256 : plan === 'standard' ? 512 : 1024,
                version: 'recommended'
            }
        });

        logger.info(`Deploy iniciado por ${interaction.user.tag} - Plano: ${plan} - Valor: R$ ${planPrice}`);
    },

    async handleComponent(interaction, action) {
        const deployData = global.deployCache?.get(interaction.user.id);

        if (!deployData) {
            return await interaction.reply({
                content: '‚ùå **Erro:** Dados do deploy n√£o encontrados. Tente novamente com o comando `/deploy`.',
                ephemeral: true
            });
        }

        switch (action) {
            case 'configure':
                await this.showConfigModal(interaction, deployData);
                break;
            case 'payment':
                await this.showUserDataModal(interaction, deployData);
                break;
            case 'confirm':
                await this.confirmDeploy(interaction, deployData);
                break;
            case 'retry':
            case 'cancel_retry':
                await this.handleRetry(interaction, action);
                break;
        }
    },

    async handleModal(interaction, action) {
        if (action === 'config') {
            const displayName = interaction.fields.getTextInputValue('displayName');
            const description = interaction.fields.getTextInputValue('description');
            const memory = parseInt(interaction.fields.getTextInputValue('memory'));
            const version = interaction.fields.getTextInputValue('version');

            // Validar inputs
            if (!displayName || !description || !memory || !version) {
                return await interaction.reply({
                    content: '‚ùå **Erro:** Todos os campos s√£o obrigat√≥rios.',
                    ephemeral: true
                });
            }

            if (memory < 256 || memory > 1024) {
                return await interaction.reply({
                    content: '‚ùå **Erro:** Mem√≥ria deve estar entre 256MB e 1024MB.',
                    ephemeral: true
                });
            }

            // Atualizar configura√ß√µes no cache
            const deployData = global.deployCache?.get(interaction.user.id);
            if (deployData) {
                deployData.config = {
                    displayName,
                    description,
                    memory,
                    version
                };
                global.deployCache.set(interaction.user.id, deployData);
            }

            const updateEmbed = new EmbedBuilder()
                .setTitle('‚úÖ Configura√ß√£o Atualizada')
                .setDescription(`**Nome:** ${displayName}\n**Descri√ß√£o:** ${description}\n**Mem√≥ria:** ${memory}MB\n**Vers√£o:** ${version}`)
                .setColor(colors.success)
                .setTimestamp();

            await interaction.reply({
                embeds: [updateEmbed],
                ephemeral: true
            });
        } else if (action === 'userdata') {
            await this.processUserDataAndPayment(interaction);
        }
    },

    async showUserDataModal(interaction, deployData) {
        const modal = new ModalBuilder()
            .setCustomId('deploy_userdata')
            .setTitle('Dados para Pagamento PIX');

        const nameInput = new TextInputBuilder()
            .setCustomId('fullName')
            .setLabel('Nome Completo')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: Jo√£o Silva Santos')
            .setRequired(true)
            .setMinLength(3)
            .setMaxLength(50);

        const emailInput = new TextInputBuilder()
            .setCustomId('email')
            .setLabel('E-mail')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: joao@email.com')
            .setRequired(true)
            .setMinLength(5)
            .setMaxLength(100);

        const cpfInput = new TextInputBuilder()
            .setCustomId('cpf')
            .setLabel('CPF (apenas n√∫meros)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 12345678901')
            .setRequired(true)
            .setMinLength(11)
            .setMaxLength(11);

        const rows = [
            new ActionRowBuilder().addComponents(nameInput),
            new ActionRowBuilder().addComponents(emailInput),
            new ActionRowBuilder().addComponents(cpfInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    },

    async processUserDataAndPayment(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });

            const fullName = interaction.fields.getTextInputValue('fullName').trim();
            const email = interaction.fields.getTextInputValue('email').trim();
            const cpf = interaction.fields.getTextInputValue('cpf').trim();

            // Validar dados
            if (!this.validateEmail(email)) {
                return await interaction.editReply({
                    content: '‚ùå **Erro:** E-mail inv√°lido. Por favor, insira um e-mail v√°lido.',
                });
            }

            if (!this.validateCPF(cpf)) {
                return await interaction.editReply({
                    content: '‚ùå **Erro:** CPF inv√°lido. Por favor, insira apenas os 11 n√∫meros do CPF.',
                });
            }

            const deployData = global.deployCache?.get(interaction.user.id);
            if (!deployData) {
                return await interaction.editReply({
                    content: '‚ùå **Erro:** Dados do deploy n√£o encontrados. Tente novamente.',
                });
            }

            // Recarregar configura√ß√µes para garantir valores atualizados
            const currentConfig = loadConfig();
            const currentPrice = currentConfig.paymentSettings[`${deployData.plan}Price`];
            
            // Atualizar pre√ßo no deployData
            deployData.price = currentPrice;
            
            // Armazenar dados do usu√°rio
            deployData.userData = {
                fullName,
                email,
                cpf
            };
            
            global.deployCache.set(interaction.user.id, deployData);

            // Criar pagamento PIX com dados reais do usu√°rio
            const paymentData = await mercadoPago.createPixPayment(
                currentPrice,
                `Deploy Square Cloud - ${deployData.config.displayName}`,
                deployData.userData
            );

            // Embed do pagamento
            const paymentEmbed = new EmbedBuilder()
                .setTitle('üí≥ Pagamento PIX')
                .setDescription(`**Valor:** R$ ${currentPrice.toFixed(2)}\n**Aplica√ß√£o:** ${deployData.config.displayName}\n**Pagador:** ${fullName}\n\n**Instru√ß√µes:**\n1. Escaneie o QR Code ou copie o c√≥digo PIX\n2. Fa√ßa o pagamento em seu banco\n3. Aguarde a confirma√ß√£o autom√°tica\n\n**C√≥digo PIX:**\n\`\`\`${paymentData.qr_code}\`\`\``)
                .setColor(colors.warning)
                .setImage(`https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(paymentData.qr_code)}`)
                .setTimestamp()
                .setFooter({ text: 'Pagamento ser√° verificado automaticamente' });

            // Bot√£o para copiar c√≥digo PIX
            const pixButton = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`deploy_copy_pix_${paymentData.id}`)
                        .setLabel('Copiar C√≥digo PIX')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìã')
                );

            await interaction.editReply({
                embeds: [paymentEmbed],
                components: [pixButton]
            });

            // Iniciar polling para verificar pagamento
            paymentPoller.startPolling(
                paymentData.id,
                interaction.user.id,
                interaction,
                async (paymentStatus) => {
                    await this.onPaymentSuccess(interaction, deployData, paymentStatus);
                },
                async () => {
                    await interaction.editReply({
                        content: '‚è∞ **Tempo esgotado!**\n\nO pagamento n√£o foi confirmado dentro do prazo. Tente novamente.',
                        embeds: [],
                        components: []
                    });
                }
            );

            // Armazenar dados do pagamento
            deployData.payment = paymentData;
            global.deployCache.set(interaction.user.id, deployData);

            logger.info(`Pagamento PIX criado para ${interaction.user.tag} - ID: ${paymentData.id} - Valor: R$ ${currentPrice}`);

        } catch (error) {
            logger.error('Erro ao processar dados do usu√°rio e pagamento:', error);
            await interaction.editReply({
                content: '‚ùå **Erro:** Falha ao processar pagamento. Verifique seus dados e tente novamente.',
                embeds: [],
                components: []
            });
        }
    },

    validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    },

    validateCPF(cpf) {
        // Verificar se tem 11 d√≠gitos e s√£o todos n√∫meros
        if (!/^\d{11}$/.test(cpf)) {
            return false;
        }
        
        // Verificar se n√£o s√£o todos n√∫meros iguais
        if (/^(\d)\1{10}$/.test(cpf)) {
            return false;
        }
        
        return true;
    },

    async showConfigModal(interaction, deployData) {
        const modal = new ModalBuilder()
            .setCustomId('deploy_config')
            .setTitle('Configurar Deploy');

        const displayNameInput = new TextInputBuilder()
            .setCustomId('displayName')
            .setLabel('Nome da Aplica√ß√£o')
            .setStyle(TextInputStyle.Short)
            .setValue(deployData.config.displayName)
            .setRequired(true);

        const descriptionInput = new TextInputBuilder()
            .setCustomId('description')
            .setLabel('Descri√ß√£o')
            .setStyle(TextInputStyle.Paragraph)
            .setValue(deployData.config.description)
            .setRequired(true);

        const memoryInput = new TextInputBuilder()
            .setCustomId('memory')
            .setLabel('Mem√≥ria (MB)')
            .setStyle(TextInputStyle.Short)
            .setValue(deployData.config.memory.toString())
            .setRequired(true);

        const versionInput = new TextInputBuilder()
            .setCustomId('version')
            .setLabel('Vers√£o do Node.js')
            .setStyle(TextInputStyle.Short)
            .setValue(deployData.config.version)
            .setRequired(true);

        const rows = [
            new ActionRowBuilder().addComponents(displayNameInput),
            new ActionRowBuilder().addComponents(descriptionInput),
            new ActionRowBuilder().addComponents(memoryInput),
            new ActionRowBuilder().addComponents(versionInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    },

    async onPaymentSuccess(interaction, deployData, paymentStatus) {
        try {
            const successEmbed = new EmbedBuilder()
                .setTitle('‚úÖ Pagamento Aprovado!')
                .setDescription('Seu pagamento foi confirmado. Iniciando deploy...')
                .setColor(colors.success)
                .setTimestamp();

            await interaction.editReply({
                embeds: [successEmbed],
                components: []
            });

            // Fazer deploy da aplica√ß√£o
            await this.performDeploy(interaction, deployData, false);

            // Log do pagamento aprovado
            try {
                await adminLogger.logPayment(interaction.client, {
                    amount: deployData.price,
                    plan: deployData.plan,
                    status: 'approved',
                    userId: interaction.user.id,
                    paymentId: paymentStatus.id
                });
            } catch (logError) {
                logger.warn('Erro ao enviar log de pagamento:', logError.message);
            }

        } catch (error) {
            logger.error('Erro ao processar pagamento aprovado:', error);
            
            // Se o erro permite retry, oferecer op√ß√£o de tentar novamente
            if (error.canRetry) {
                await this.showRetryOption(interaction, deployData, error);
            } else {
                await interaction.editReply({
                    content: '‚ùå **Erro:** Falha ao processar pagamento aprovado.',
                    embeds: [],
                    components: []
                });
            }
        }
    },

    async performDeploy(interaction, deployData, isRetry = false) {
        try {
            // Embed de deploy em progresso
            const deployingEmbed = new EmbedBuilder()
                .setTitle(isRetry ? 'üîÑ Tentando Deploy Novamente...' : 'üöÄ Fazendo Deploy...')
                .setDescription(isRetry ? 
                    'Tentando implantar sua aplica√ß√£o novamente na Square Cloud. Aguarde...' : 
                    'Sua aplica√ß√£o est√° sendo implantada na Square Cloud. Aguarde...')
                .setColor(colors.info)
                .setTimestamp();

            await interaction.editReply({
                embeds: [deployingEmbed],
                components: []
            });

            // Baixar arquivo
            let fileBuffer;
            try {
                if (!isRetry || !deployData.fileBuffer) {
                    const fileResponse = await axios.get(deployData.file.url, {
                        responseType: 'arraybuffer',
                        timeout: 60000,
                        maxContentLength: 100 * 1024 * 1024,
                        maxBodyLength: 100 * 1024 * 1024
                    });
                    fileBuffer = Buffer.from(fileResponse.data);
                    deployData.fileBuffer = fileBuffer; // Cache para retry
                    logger.info(`Arquivo baixado com sucesso: ${fileBuffer.length} bytes`);
                } else {
                    fileBuffer = deployData.fileBuffer;
                    logger.info(`Usando arquivo em cache: ${fileBuffer.length} bytes`);
                }
            } catch (downloadError) {
                logger.warn('Erro ao baixar arquivo, usando buffer demo:', downloadError.message);
                throw new Error(`Falha ao baixar arquivo: ${downloadError.message}`);
            }

            // Fazer deploy
            const deployResult = await squareCloud.deployApp(fileBuffer, deployData.config);

            // Embed de sucesso
            const successEmbed = new EmbedBuilder()
                .setTitle('‚úÖ Deploy Conclu√≠do!')
                .setDescription(`Sua aplica√ß√£o foi implantada com sucesso na Square Cloud!`)
                .addFields(
                    { name: 'üÜî ID da Aplica√ß√£o', value: deployResult.id, inline: true },
                    { name: 'üìõ Nome', value: deployData.config.displayName, inline: true },
                    { name: 'üíæ Mem√≥ria', value: `${deployData.config.memory}MB`, inline: true },
                    { name: 'üåê URL', value: deployResult.url || 'Em processamento', inline: false }
                )
                .setColor(colors.success)
                .setTimestamp()
                .setFooter({ text: 'Square Cloud Bot' });

            await interaction.editReply({
                embeds: [successEmbed],
                components: []
            });

            logger.info(`Deploy conclu√≠do com sucesso: ${deployResult.id} por ${interaction.user.tag}`);

            // Registrar a aplica√ß√£o para o usu√°rio
            squareCloud.registerUserApp(interaction.user.id, deployResult.id);

            // Log do deploy realizado
            try {
                await adminLogger.logDeploy(interaction.client, {
                    appName: deployData.config.displayName,
                    appId: deployResult.id,
                    memory: deployData.config.memory,
                    userId: interaction.user.id,
                    paidAmount: deployData.price
                });
            } catch (logError) {
                logger.warn('Erro ao enviar log de deploy:', logError.message);
            }

            // Limpar cache ap√≥s deploy bem-sucedido
            global.deployCache.delete(interaction.user.id);

        } catch (error) {
            logger.error('Erro no deploy:', error);

            // Se o erro permite retry, mostrar op√ß√£o
            if (error.canRetry && !isRetry) {
                await this.showRetryOption(interaction, deployData, error);
            } else {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå Falha no Deploy')
                    .setDescription(`Ocorreu um erro durante o deploy:\n\n**Erro:** ${error.message}\n\n**Poss√≠veis solu√ß√µes:**\n‚Ä¢ Verifique se o arquivo est√° correto\n‚Ä¢ Tente novamente em alguns minutos\n‚Ä¢ Entre em contato com o suporte se o problema persistir`)
                    .setColor(colors.error)
                    .setTimestamp();
                await interaction.editReply({
                    embeds: [errorEmbed],
                    components: []
                });
            }
            
            throw error;
        }
    },

    async showRetryOption(interaction, deployData, error) {
        const retryEmbed = new EmbedBuilder()
            .setTitle('‚ö†Ô∏è Falha no Deploy')
            .setDescription(`O deploy falhou, mas voc√™ pode tentar novamente:\n\n**Erro:** ${error.message}\n\n**O que aconteceu:**\n‚Ä¢ Seu pagamento foi aprovado com sucesso\n‚Ä¢ O erro ocorreu durante a implanta√ß√£o\n‚Ä¢ Voc√™ pode tentar fazer o deploy novamente sem pagar\n\n**Escolha uma op√ß√£o abaixo:**`)
            .setColor(colors.warning)
            .setTimestamp();

        const retryButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('deploy_retry')
                    .setLabel('üîÑ Tentar Novamente')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üöÄ'),
                new ButtonBuilder()
                    .setCustomId('deploy_cancel_retry')
                    .setLabel('‚ùå Cancelar')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚úñÔ∏è')
            );

        await interaction.editReply({
            embeds: [retryEmbed],
            components: [retryButtons]
        });

        // Manter dados no cache para retry
        global.deployCache.set(interaction.user.id, deployData);
    },

    async handleRetry(interaction, action) {
        const deployData = global.deployCache?.get(interaction.user.id);
        
        if (!deployData) {
            return await interaction.update({
                content: '‚ùå **Erro:** Dados do deploy n√£o encontrados. Os dados expiraram.',
                embeds: [],
                components: []
            });
        }

        if (action === 'retry') {
            try {
                await interaction.deferUpdate();
                await this.performDeploy(interaction, deployData, true);
            } catch (error) {
                logger.error('Erro no retry do deploy:', error);
                
                const finalErrorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå Deploy Falhou Definitivamente')
                    .setDescription(`Infelizmente n√£o foi poss√≠vel completar o deploy ap√≥s m√∫ltiplas tentativas.\n\n**√öltimo erro:** ${error.message}\n\n**Pr√≥ximos passos:**\n‚Ä¢ Entre em contato com o suporte\n‚Ä¢ Seu pagamento foi processado com sucesso\n‚Ä¢ Voc√™ receber√° assist√™ncia para resolver o problema`)
                    .setColor(colors.error)
                    .setTimestamp();

                await interaction.editReply({
                    embeds: [finalErrorEmbed],
                    components: []
                });

                // Limpar cache ap√≥s falha definitiva
                global.deployCache.delete(interaction.user.id);
            }
        } else if (action === 'cancel_retry') {
            const cancelEmbed = new EmbedBuilder()
                .setTitle('‚ùå Deploy Cancelado')
                .setDescription('Voc√™ cancelou a tentativa de deploy.\n\n**Importante:**\n‚Ä¢ Seu pagamento foi processado com sucesso\n‚Ä¢ Entre em contato com o suporte se precisar de ajuda\n‚Ä¢ Voc√™ pode tentar fazer um novo deploy quando quiser')
                .setColor(colors.info)
                .setTimestamp();

            await interaction.update({
                embeds: [cancelEmbed],
                components: []
            });

            // Limpar cache
            global.deployCache.delete(interaction.user.id);
        }
    }
};