const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { colors } = require('../config/config.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('help')
        .setDescription('Mostrar ajuda e informa√ß√µes sobre os comandos'),

    async execute(interaction) {
        // Embed principal de ajuda
        const helpEmbed = new EmbedBuilder()
            .setTitle('ü§ñ Square Cloud Bot - Ajuda')
            .setDescription('Bot oficial para gerenciamento de aplica√ß√µes na Square Cloud atrav√©s do Discord.')
            .addFields(
                {
                    name: 'üöÄ Comandos de Deploy',
                    value: '`/deploy` - Fazer deploy de uma aplica√ß√£o com pagamento integrado',
                    inline: false
                },
                {
                    name: 'üìä Comandos de Gerenciamento',
                    value: '`/status` - Verificar status de uma aplica√ß√£o\n`/list` - Listar todas as aplica√ß√µes\n`/delete` - Deletar uma aplica√ß√£o',
                    inline: false
                },
                {
                    name: 'üí° Comandos de Ajuda',
                    value: '`/help` - Mostrar esta mensagem de ajuda\n`/about` - Informa√ß√µes sobre o bot',
                    inline: false
                },
                {
                    name: 'üí≥ Sistema de Pagamento',
                    value: 'Pagamento via PIX integrado com verifica√ß√£o autom√°tica\n‚Ä¢ B√°sico: R$ 15,00\n‚Ä¢ Padr√£o: R$ 25,00\n‚Ä¢ Premium: R$ 50,00',
                    inline: false
                }
            )
            .setColor(colors.primary)
            .setTimestamp()
            .setFooter({ text: 'Square Cloud Bot | Desenvolvido para a comunidade' });

        // Bot√µes de navega√ß√£o
        const navigationButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('help_commands')
                    .setLabel('Comandos Detalhados')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üìã'),
                new ButtonBuilder()
                    .setCustomId('help_deploy')
                    .setLabel('Como Fazer Deploy')
                    .setStyle(ButtonStyle.Success)
                    .setEmoji('üöÄ'),
                new ButtonBuilder()
                    .setCustomId('help_payment')
                    .setLabel('Sistema de Pagamento')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üí≥')
            );

        await interaction.reply({
            embeds: [helpEmbed],
            components: [navigationButtons],
            ephemeral: true
        });
    },

    async handleComponent(interaction, action) {
        switch (action) {
            case 'commands':
                await this.showDetailedCommands(interaction);
                break;
            case 'deploy':
                await this.showDeployGuide(interaction);
                break;
            case 'payment':
                await this.showPaymentInfo(interaction);
                break;
            case 'back':
                await this.execute(interaction);
                break;
        }
    },

    async showDetailedCommands(interaction) {
        const commandsEmbed = new EmbedBuilder()
            .setTitle('üìã Comandos Detalhados')
            .setDescription('Informa√ß√µes detalhadas sobre todos os comandos dispon√≠veis:')
            .addFields(
                {
                    name: 'üöÄ /deploy',
                    value: 'Fazer deploy de uma aplica√ß√£o na Square Cloud\n‚Ä¢ Anexe um arquivo ZIP\n‚Ä¢ Escolha o plano desejado\n‚Ä¢ Configure os par√¢metros\n‚Ä¢ Efetue o pagamento via PIX',
                    inline: false
                },
                {
                    name: 'üìä /status',
                    value: 'Verificar o status de uma aplica√ß√£o\n‚Ä¢ Forne√ßa o ID da aplica√ß√£o\n‚Ä¢ Veja informa√ß√µes em tempo real\n‚Ä¢ Monitore CPU, mem√≥ria e uptime',
                    inline: false
                },
                {
                    name: 'üìã /list',
                    value: 'Listar todas as suas aplica√ß√µes\n‚Ä¢ Veja todas as aplica√ß√µes\n‚Ä¢ Status de cada uma\n‚Ä¢ Informa√ß√µes b√°sicas',
                    inline: false
                },
                {
                    name: 'üóëÔ∏è /delete',
                    value: 'Deletar uma aplica√ß√£o\n‚Ä¢ Forne√ßa o ID da aplica√ß√£o\n‚Ä¢ Confirme a exclus√£o\n‚Ä¢ A√ß√£o irrevers√≠vel',
                    inline: false
                }
            )
            .setColor(colors.info)
            .setTimestamp();

        const backButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('help_back')
                    .setLabel('Voltar')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚¨ÖÔ∏è')
            );

        await interaction.update({
            embeds: [commandsEmbed],
            components: [backButton]
        });
    },

    async showDeployGuide(interaction) {
        const deployEmbed = new EmbedBuilder()
            .setTitle('üöÄ Como Fazer Deploy')
            .setDescription('Passo a passo para fazer deploy da sua aplica√ß√£o:')
            .addFields(
                {
                    name: '1Ô∏è‚É£ Preparar Aplica√ß√£o',
                    value: 'Comprima sua aplica√ß√£o em um arquivo ZIP\n‚Ä¢ Inclua todos os arquivos necess√°rios\n‚Ä¢ M√°ximo 100MB\n‚Ä¢ Certifique-se que est√° funcionando localmente',
                    inline: false
                },
                {
                    name: '2Ô∏è‚É£ Usar o Comando',
                    value: 'Execute `/deploy` e anexe seu arquivo\n‚Ä¢ Escolha o plano desejado\n‚Ä¢ Configure os par√¢metros se necess√°rio\n‚Ä¢ Revise as informa√ß√µes',
                    inline: false
                },
                {
                    name: '3Ô∏è‚É£ Pagamento',
                    value: 'Efetue o pagamento via PIX\n‚Ä¢ Escaneie o QR Code\n‚Ä¢ Ou copie o c√≥digo PIX\n‚Ä¢ Aguarde a confirma√ß√£o autom√°tica',
                    inline: false
                },
                {
                    name: '4Ô∏è‚É£ Deploy Autom√°tico',
                    value: 'Ap√≥s o pagamento confirmado:\n‚Ä¢ Deploy inicia automaticamente\n‚Ä¢ Receba o ID da aplica√ß√£o\n‚Ä¢ Acesse sua aplica√ß√£o online',
                    inline: false
                }
            )
            .setColor(colors.success)
            .setTimestamp();

        const backButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('help_back')
                    .setLabel('Voltar')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚¨ÖÔ∏è')
            );

        await interaction.update({
            embeds: [deployEmbed],
            components: [backButton]
        });
    },

    async showPaymentInfo(interaction) {
        const paymentEmbed = new EmbedBuilder()
            .setTitle('üí≥ Sistema de Pagamento')
            .setDescription('Informa√ß√µes sobre o sistema de pagamento integrado:')
            .addFields(
                {
                    name: 'üí∞ Planos Dispon√≠veis',
                    value: '**B√°sico:** R$ 15,00 - 256MB RAM\n**Padr√£o:** R$ 25,00 - 512MB RAM\n**Premium:** R$ 50,00 - 1024MB RAM',
                    inline: false
                },
                {
                    name: 'üîê Seguran√ßa',
                    value: 'Pagamentos processados via Mercado Pago\n‚Ä¢ Ambiente seguro e criptografado\n‚Ä¢ Verifica√ß√£o autom√°tica\n‚Ä¢ Sem armazenamento de dados sens√≠veis',
                    inline: false
                },
                {
                    name: '‚ö° Processo Autom√°tico',
                    value: 'Verifica√ß√£o em tempo real\n‚Ä¢ Polling autom√°tico a cada 5 segundos\n‚Ä¢ Timeout de 5 minutos\n‚Ä¢ Deploy autom√°tico ap√≥s confirma√ß√£o',
                    inline: false
                },
                {
                    name: 'üì± M√©todos de Pagamento',
                    value: 'PIX instant√¢neo\n‚Ä¢ QR Code para escanear\n‚Ä¢ C√≥digo PIX para copiar\n‚Ä¢ Confirma√ß√£o em segundos',
                    inline: false
                }
            )
            .setColor(colors.warning)
            .setTimestamp();

        const backButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('help_back')
                    .setLabel('Voltar')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚¨ÖÔ∏è')
            );

        await interaction.update({
            embeds: [paymentEmbed],
            components: [backButton]
        });
    }
};